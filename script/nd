#!/usr/bin/env python3

import argparse
import os
import requests
import hashlib
from functools import partial
import json
from pygments import highlight, lexers, formatters

import urllib3
urllib3.disable_warnings()

remote = os.getenv("ND_REMOTE", default="http://127.0.0.1:8080")
ct_object = "application/vnd.nd"
ct_meta = "application/vnd.nd+json"
#text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8

def json_pprint(d):
	j = json.dumps(d, sort_keys=True, indent=2, separators=(',', ': '))
	colorful_json = highlight(j, lexers.JsonLexer(), formatters.TerminalFormatter())
	print(colorful_json)

def sha256(filename):
	with open(filename, mode='rb') as f:
		d = hashlib.sha256()
		for buf in iter(partial(f.read, 128), b''):
			d.update(buf)
	return d.hexdigest()

def nd_get_meta(oid):
	url = '{}/objects/{}'.format(remote,oid)
	rt = requests.get(url, verify=False, headers={'Accept': ct_meta})
	m = json.loads(rt.text)
	return m['meta']

def nd_list(verbose=False):
	url = '{}/objects'.format(remote)
	rt = requests.get(url, verify=False, headers={'Accept': ct_meta})
	r = json.loads(rt.text)
	if not verbose:
		return r
	
	result = {}
	for h in r['objects']:
		result[h] = nd_get_meta(h)
	return result

def nd_find_filename(filename):
	result = []
	rows = nd_list(True)
	for oid, m in rows.items():
		if filename in m['filename']:
			result.append({oid: m})
	return result

parser = argparse.ArgumentParser(
	prog="nd",
	description="iNDdelible command line client tool"
)
subparsers = parser.add_subparsers(
	dest='action',
	help='Action',
)

list_parser = subparsers.add_parser('list', aliases=['l'], help='List all files')
list_parser.add_argument(
	'-v', '--verbose',
	action='store_true',
	help="Runs meta query on every object to provide all metadata for all objects",
)

meta_parser = subparsers.add_parser('meta', aliases=['m'], help='Get object metadata')
meta_parser.add_argument(
	'-f', '--filename',
	action='store_true',
	help="Optional switch to search on filename rather than oid",
)
meta_parser.add_argument(
	'oid',
	help="Object ID or filename to fetch metadata for",
)

get_parser = subparsers.add_parser('get', aliases=['g'], help='Get object')
get_parser.add_argument(
	'oid',
	help="Object ID to fetch",
)

put_parser = subparsers.add_parser('put', aliases=['p'], help='Put a file')
put_parser.add_argument(
	'-u', '--url',
	help="When set, will attempt fetch the source file from a URL before putting onto the server",
	action='store_true'
)
put_parser.add_argument(
	'-r', '--rename',
	help="Optional switch for provide a new filename to use when uploading",
	type=str
)
put_parser.add_argument(
	'file',
	help="File to put on the server",
)
a = parser.parse_args()

if a.action == None:
	parser.print_help()
	exit(1)

if (a.action == 'p'):
	if a.url:
		print("getting " + a.file)
		r = requests.get(a.file, allow_redirects=True)
		ct = r.headers.get('content-type')
		if ct != None:
			if 'html' in ct.lower():
				print("ERROR: URL doesn't seem to point to a downloadable file")
				exit(1)
		print(os.path.basename(a.file))
		filename = os.path.basename(a.file)
		filepath = '/tmp/{}'.format(filename)
		open(filepath, 'wb').write(r.content)
	else:
		filepath = os.path.normpath(a.file)
		filename = os.path.basename(filepath)
	
	if a.rename != None:
		filename = a.rename
		print("Renaming upload to {}".format(filename))
	
	hash = sha256(filepath)
	url = '{}/objects/{}'.format(remote, hash)
	files = {'file': (filename, open(filepath, 'rb'))}
	print(url)
	rt = requests.put(url, files=files, verify=False, headers={'Accept': ct_meta})
	print(rt.text)
	r = json.loads(rt.text)
	json_pprint(r)
	exit(0)

if (a.action == 'l'):
	result = nd_list(a.verbose)
	json_pprint(result)
	exit(0)

if (a.action == 'm'):
	if a.filename == False:
		url = '{}/objects/{}'.format(remote, a.oid)
		rt = requests.get(url, verify=False, headers={'Accept': ct_meta})
		m = json.loads(rt.text)
		json_pprint(m['meta'])
		exit(0)
	
	results = nd_find_filename(a.oid)
	if len(results) == 0:
		print("Not found")
		exit(1)
	json_pprint(results)
	exit(0)

if (a.action == 'g'):
	m = nd_get_meta(a.oid)
	
	cwd = os.getcwd()
	filepath = '{}/{}'.format(cwd, m['filename'])
	print(filepath)
	
	url = '{}/objects/{}'.format(remote, a.oid)
	r = requests.get(url, verify=False, headers={'Accept': "*/*"})
	open(filepath, 'wb').write(r.content)
	exit(0)
